package day2;

import java.util.Scanner;

public class Task1 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int floors = sc.nextInt();
        if (floors <= 0) {
            System.out.println("Ошибка ввода");
        } else if (floors <= 4) {
            System.out.println("Малоэтажный дом");
        } else if (floors <= 8) {
            System.out.println("Среднеэтажный дом");
        } else {
            System.out.println("Многоэтажный дом");
        }
    }
}

//1. Статья про арифметические операторы в Java. Они необходимы для решения задач этого и последующих дней.
//        http://study-java.ru/uroki-java/arifmeticheskie-operatory-i-matematika-v-java/
//
//        Доп. информация про логические операторы И, ИЛИ, НЕ
//        В Java есть следующие операторы:
//        && - логическое “И”
//        || - логическое “ИЛИ”
//        ! - логическое “НЕ”
//
//        Эти операторы работают с булевскими значениями - true (истина) и false (ложь). Как и известные нам математические операторы +, -, /, *, логические операторы принимают на вход значения (операнды) и возвращают значение - результат операции. Только если в случае с математическими операторами, входные и возвращаемые значения - это числа, в случае с логическими операторами - входные и возвращаемые значения - это булевские значения (true либо false).
//
//        Логический оператор && (И) возвращает true только в том случае, если оба входных значения равны true. Во всех остальных случаях этот оператор возвращает false. Легко запомнить: оператор логического “И” требует, чтобы первое И второе значение были true, чтобы результат был true.
//
//        Пример кода:
//        boolean a = true;
//        boolean b = true;
//        boolean result = a && b; // a,b - операнды, && - операция логического “И”
//        System.out.println(result); // true
//
//        Другой пример:
//        boolean a = true;
//        boolean b = false;
//        boolean result = a && b;
//        System.out.println(result); // false
//
//        Логический оператор || (ИЛИ) возвращает true в том случае, если хотя бы одно из входных значения равно true. Если ни одно из входных значений не равно true, оператор ИЛИ возвращает false. Легко запомнить: оператор логического “ИЛИ” требует, чтобы первое ИЛИ второе значение были true, чтобы результат был true.
//
//        Пример кода:
//        boolean a = false;
//        boolean b = true;
//        boolean result = a || b;
//        System.out.println(result); // true
//
//        Другой пример:
//        boolean a = false;
//        boolean b = false;
//        boolean result = a || b;
//        System.out.println(result); // false
//
//        Логический оператор ! (НЕ) принимает на вход только одно булевское значение и инвертирует его. Из true делается false, а из false делается true. Этот логический оператор еще называют оператором логического отрицания.
//
//        Пример кода:
//        boolean a = false;
//        boolean b = true;
//        System.out.println(!a); // true
//        System.out.println(!b); // false
//
//        Вышеописанные логические операторы особенно полезны в условном операторе if, так как они позволяют нам комбинировать несколько условий.
//        Допустим, мы хотим, чтобы код в блоке if выполнялся в том случае, если значение, лежащее в переменной a больше, чем 5, но меньше, чем 10. Код для этого будет выглядеть следующим образом:
//
//        if (a > 5 && a < 10) {
//        // код здесь
//        }
//
//
//        Задачи:
//
//        1. Реализовать программу, которая принимает на вход через консоль с помощью класса Scanner, число, соответствующее количеству этажей в здании. Используя условный оператор if, необходимо вывести в консоль сообщение о типе такого дома.
//
//        Условия: если этажей 1-4 - “Малоэтажный дом”, 5-8 - “Среднеэтажный дом”, 9 и более - “Многоэтажный дом”. Также, необходимо учесть что может быть введено отрицательное значение, в таком случае сообщить “Ошибка ввода”.
